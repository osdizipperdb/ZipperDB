

cmake_minimum_required(VERSION 3.9)
project(leveldb VERSION 1.21.0 LANGUAGES C CXX)

set(CMAKE_DEBUG_POSTFIX "d")

set(SNAPPY_LIBRARY "")

string(REGEX MATCH "clang" CLANG ${CMAKE_CXX_COMPILER})

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

find_library(Pthread_LIBRARY pthread)
find_library(Realtime_LIBRARY rt)

set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")

find_package(PMDK REQUIRED)
set(Stdcpp_LIBRARY stdc++)

include(TestBigEndian)
test_big_endian(LEVELDB_IS_BIG_ENDIAN)


include(CheckIncludeFile)
check_include_file("unistd.h" HAVE_UNISTD_H)

include(CheckLibraryExists)
check_library_exists(crc32c crc32c_value "" HAVE_CRC32C)
check_library_exists(snappy snappy_compress "" HAVE_SNAPPY)
check_library_exists(tcmalloc malloc "" HAVE_TCMALLOC)


include_directories(
	${VMEM_INCLUDE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/include)

add_compile_options(
	-Werror
	-std=c++17
	-lpmemobj
)

add_definitions(-DLEVELDB_ATOMIC_PRESENT)
add_definitions(-DOS_LINUX)
add_definitions(-DLEVELDB_PLATFORM_POSIX)
#add_definitions(-fno_builtin-memcmp)
add_definitions(-Wint-to-pointer-cast)
add_definitions(-DPERF_LOG=1)

set(LEVEL_DB_FILES

	#"${PROJECT_BINARY_DIR}/${LEVELDB_PORT_CONFIG_DIR}/port_config.h"
		include/leveldb/c.h
		include/leveldb/cache.h
		include/leveldb/comparator.h
		include/leveldb/db.h
		include/leveldb/dumpfile.h
		include/leveldb/env.h
		include/leveldb/export.h
		include/leveldb/filter_policy.h
		include/leveldb/iterator.h
		include/leveldb/options.h
		include/leveldb/slice.h
		include/leveldb/status.h
		include/leveldb/table.h
		include/leveldb/table_builder.h
		include/leveldb/write_batch.h
		db/builder.cc
		db/builder.h
		db/c.cc
		db/db_impl.cc
		db/db_impl.h
		db/db_iter.cc
		db/db_iter.h
		db/dbformat.cc
		db/dbformat.h
		db/dumpfile.cc
		db/filename.cc
		db/filename.h
		db/log_format.h
		db/log_reader.cc
		db/log_reader.h
		db/log_writer.cc
		db/log_writer.h
		db/memtable.cc
		db/memtable.h
		db/pmemtable.cc
		db/pmemtable.h
		db/repair.cc
		db/skiplist.h
		#inserted for test
		db/pmemskiplist.h
		db/snapshot.h
		db/table_cache.cc
		db/table_cache.h
		db/version_edit.cc
		db/version_edit.h
		db/version_set.cc
		db/version_set.h
		db/write_batch_internal.h
		db/write_batch.cc
		port/atomic_pointer.h
		port/port_stdcxx.h
		port/port.h
		port/thread_annotations.h
		table/block_builder.cc
		table/block_builder.h
		table/block.cc
		table/block.h
		table/filter_block.cc
		table/filter_block.h
		table/format.cc
		table/format.h
		table/iterator_wrapper.h
		table/iterator.cc
		table/merger.cc
		util/arena.cc
		util/arena.h
		util/pmemarena.cc
		util/pmemarena.h
		util/bloom.cc
		util/cache.cc
		util/coding.cc
		util/coding.h
		util/comparator.cc
		util/crc32c.cc
		util/crc32c.h
		util/env.cc
		util/filter_policy.cc
		util/hash.cc
		util/hash.h
		util/logging.cc
		util/logging.h
		util/mutexlock.h
		util/no_destructor.h
		util/options.cc
		util/random.h
		util/status.cc
		util/posix_logger.h
		util/env_posix.cc)

	#if(WIN32)
	#list(APPEND LEVEL_DB_FILES
	#	port/port_win.h
	#	port/port_win.cc
	#		util/win_logger.h
	#		util/win_logger.cc
	#		util/env_boost.cc)
	#else()
	#list(APPEND LEVEL_DB_FILES
	#		port/port_posix.h
	#		port/port_posix.cc
	#		util/posix_logger.h
	#		util/env_posix.cc)
	#endif()

add_library(leveldb ${LEVEL_DB_FILES})

target_include_directories(leveldb
	PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
	PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}
	)

set_target_properties(leveldb PROPERTIES PUBLIC_HEADER
	"include/leveldb/c.h;
	include/leveldb/cache.h;
	include/leveldb/comparator.h;
	include/leveldb/db.h;
	include/leveldb/dumpfile.h;
	include/leveldb/env.h;
	include/leveldb/export.h;
	include/leveldb/filter_policy.h;
	include/leveldb/iterator.h;
	include/leveldb/options.h;
	include/leveldb/slice.h;
	include/leveldb/status.h;
	include/leveldb/table.h;
	include/leveldb/table_builder.h;
	include/leveldb/write_batch.h;
	")

target_link_libraries(leveldb
	PRIVATE
	${Pthread_LIBRARY}
	${PMEM_LIBRARY}
	${PMEMCTO_LIBRARY}
	${PMEMOBJ_LIBRARY}
	${PMEMLOG_LIBRARY}
	${VMEM_LIBRARY}
	)

#target_compile_definitions(leveldb
#	PRIVATE
#	LEVELDB_IS_BIG_ENDIAN = test_big_endian(LEVELDB_IS_BIG_ENDIAN))



INSTALL(TARGETS leveldb ARCHIVE DESTINATION /usr/local/lib PUBLIC_HEADER DESTINATION /usr/local/include/leveldb)

add_executable(db_bench db/db_bench.cc)
target_link_libraries(db_bench PUBLIC leveldb)

